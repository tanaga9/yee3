name: Build macOS App and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:

permissions:
  contents: write

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install pdm
          pdm install --dev

      - name: Create iconset
        run: |
          iconutil -c icns src/yee3/resources/yee3.iconset

      - name: Build app with Briefcase
        run: |
          pdm run briefcase build macOS

      - name: Patch Info.plist
        run: |
          patch -u < Info.plist.patch

      - name: Package app
        run: |
          printf "1\n" | pdm run briefcase package macOS

      - name: Upload built app
        uses: actions/upload-artifact@v4
        with:
          name: macOS-app
          path: dist/

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built app artifact
        uses: actions/download-artifact@v4
        with:
          name: macOS-app
          path: .

      - name: Extract version from Git tag
        run: echo "VERSION_TAG=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Extract version from pyproject.toml
        run: |
          VERSION_TOML=$(grep '^version =' pyproject.toml | cut -d '"' -f2)
          echo "VERSION_TOML=$VERSION_TOML" >> $GITHUB_ENV

      - name: Compare versions and fail if mismatched
        run: |
          if [ "$VERSION_TAG" != "$VERSION_TOML" ]; then
            echo "❌ Version mismatch: Git tag ($VERSION_TAG) != pyproject.toml ($VERSION_TOML)"
            exit 1
          fi
          echo "✅ Version match: $VERSION_TAG"

      - name: List directory contents
        run: |
          ls -la
          find . -maxdepth 2

      - name: Compress built app into ZIP
        run: |
          zip "Yee_3-${VERSION_TAG}.zip" "Yee 3-${VERSION_TAG}.dmg"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: Automated release for version ${{ github.ref_name }}.
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Yee_3-${{ env.VERSION_TAG }}.zip
          asset_name: Yee_3-${{ env.VERSION_TAG }}.zip
          asset_content_type: application/zip
